{"version":3,"file":"component---src-pages-markdown-remark-fields-slug-tsx-8e62b2b036a17d20a396.js","mappings":"2MAgFA,UArEyCA,IAGnC,gBAFJC,MAAM,eAAEC,GACRC,UAAU,SAAEC,IACb,EACC,IAAKF,EACH,MAAM,IAAIG,UAAU,gCAGtB,IAAKH,EAAeI,SAAWJ,EAAeK,YAC5C,MAAM,IAAIF,UAAU,sCAGtB,IAAKH,EAAeM,KAClB,MAAM,IAAIC,MAAM,qCAGlB,MAAMC,EAAWR,EAAeI,OAAOI,SAEvC,IAAKA,EACH,MAAM,IAAID,MAAM,qCAGlB,MAAME,EAA6B,CAAC,EAEpC,GAAiB,YAAbD,GAAyD,OAA/BR,EAAeI,OAAOM,KAClDD,EAAgB,UAAI,uDACpBA,EAAoB,cAAI,CACtBE,gBAAiB,WACjBC,YAAa,UAEfH,EAAW,KAAIT,EAAeK,YAAYQ,UACrC,GAAiB,UAAbL,EACTC,EAAoB,cAAI,CACtBE,gBAAiB,UACjBC,YAAa,YACbE,aAAc,eAEhBL,EAAW,KAAIT,EAAeK,YAAYQ,SACrC,IAAiB,UAAbL,EAOT,MAAM,IAAID,MAAM,0CANhBE,EAAoB,cAAI,CACtBE,gBAAiB,UACjBC,YAAa,eACbE,aAAc,QAIlB,CAKA,OAHAL,EAAgB,UACG,QADF,EACfA,EAAgB,iBAAC,QAAI,6CAGrBM,EAAAA,cAACC,EAAAA,EAAM,CAACd,SAAUA,GAChBa,EAAAA,cAACE,EAAAA,GAAO,eACNf,SAAUA,EACVI,KAAyB,QAArB,EAAEN,EAAeM,YAAI,QAAI,GAC7BY,MAAOlB,EAAeK,YAAYa,MAClCC,gBACkC,QADnB,EACbnB,EAAeK,YAAYe,aAAK,OAAiB,QAAjB,EAAhCC,EAAkCC,uBAAe,WAAjB,EAAhCC,EAAmDC,cAErDC,SAAUzB,EAAeK,YAAYoB,eAAYC,EACjDC,aAAc3B,EAAeK,YAAYsB,mBAAgBD,EACzDE,oBAAqB5B,EAAeK,YAAYuB,qBAC5CnB,IAEC,EAMN,MAAMoB,EAA0CC,IAAA,IACrD7B,UAAU,SAAEC,GACZH,MACEC,gBACEK,aAAa,MAAEa,EAAK,YAAEa,EAAW,MAAEX,EAAK,oBAAEQ,GAAqB,QAC/DI,KAGL,SACCjB,EAAAA,cAACkB,EAAAA,EAAa,CACZ/B,SAAUA,EACVgC,UAAUC,EAAAA,EAAAA,GAAOf,GACjBgB,UAAWlB,EACXa,YAAcA,GAAeC,GAAW,IAExCjB,EAAAA,cAAAA,OAAAA,CAAMsB,SAAS,UAAUC,QAAQ,UAAUC,GAAG,YAC7CX,GACCb,EAAAA,cAAAA,OAAAA,CACEsB,SAAS,4BACTC,QAASV,IAGC,C","sources":["webpack://tetov-xyz/./src/pages/{MarkdownRemark.fields__slug}.tsx"],"sourcesContent":["import { graphql, HeadFC, PageProps } from \"gatsby\";\nimport type { ImageDataLike } from \"gatsby-plugin-image\";\nimport { getSrc } from \"gatsby-plugin-image\";\nimport * as React from \"react\";\nimport type { ArticleProp } from \"src/components/article\";\nimport { Article } from \"src/components/article\";\nimport HeadComponent from \"src/components/head\";\nimport Layout from \"src/components/layout\";\n\ntype GatsbyMarkdownPage = React.FC<PageProps<Queries.MarkdownPageQuery>>;\n\nconst MarkdownPage: GatsbyMarkdownPage = ({\n  data: { markdownRemark },\n  location: { pathname },\n}) => {\n  if (!markdownRemark) {\n    throw new TypeError(\"MarkdownRemark null on node.\");\n  }\n\n  if (!markdownRemark.fields || !markdownRemark.frontmatter) {\n    throw new TypeError(\"Fields or FrontMatter null on node\");\n  }\n\n  if (!markdownRemark.html) {\n    throw new Error(\"Content contains no HTML content.\");\n  }\n\n  const category = markdownRemark.fields.category;\n\n  if (!category) {\n    throw new Error(\"No category set on node's fields.\");\n  }\n\n  const prop: Partial<ArticleProp> = {};\n\n  if (category === \"special\" && markdownRemark.fields.slug === \"cv\") {\n    prop[\"className\"] = \"cv-screen prose dark:prose-invert prose-a:link-style\";\n    prop[\"articleMarkup\"] = {\n      articleMF2Class: \"h-resume\",\n      articleType: \"Person\",\n    };\n    prop[\"date\"] = markdownRemark.frontmatter.date;\n  } else if (category === \"posts\") {\n    prop[\"articleMarkup\"] = {\n      articleMF2Class: \"h-entry\",\n      articleType: \"BlogEntry\",\n      bodyItemProp: \"articleBody\",\n    };\n    prop[\"date\"] = markdownRemark.frontmatter.date;\n  } else if (category === \"projs\") {\n    prop[\"articleMarkup\"] = {\n      articleMF2Class: \"h-entry\",\n      articleType: \"CreativeWork\",\n      bodyItemProp: \"about\",\n    };\n  } else {\n    throw new Error(\"Node doesn't match any prop templates.\");\n  }\n\n  prop[\"className\"] =\n    prop[\"className\"] ?? \"prose dark:prose-invert prose-a:link-style\";\n\n  return (\n    <Layout pathname={pathname}>\n      <Article\n        pathname={pathname}\n        html={markdownRemark.html ?? \"\"}\n        title={markdownRemark.frontmatter.title}\n        bannerImageData={\n          markdownRemark.frontmatter.image?.childImageSharp?.bannerImgData\n        }\n        imageAlt={markdownRemark.frontmatter.imageAlt || undefined}\n        imageCaption={markdownRemark.frontmatter.imageCaption || undefined}\n        machineReadableDate={markdownRemark.frontmatter.machineReadableDate}\n        {...prop}\n      />\n    </Layout>\n  );\n};\n\nexport default MarkdownPage;\n\nexport const Head: HeadFC<Queries.MarkdownPageQuery> = ({\n  location: { pathname },\n  data: {\n    markdownRemark: {\n      frontmatter: { title, description, image, machineReadableDate },\n      excerpt,\n    },\n  },\n}) => (\n  <HeadComponent\n    pathname={pathname}\n    imageUrl={getSrc(image as ImageDataLike)}\n    pageTitle={title as string}\n    description={(description || excerpt || \"\") as string}\n  >\n    <meta property=\"og:type\" content=\"article\" id=\"og:type\" />\n    {machineReadableDate && (\n      <meta\n        property=\"og:article:published_time\"\n        content={machineReadableDate as string}\n      />\n    )}\n  </HeadComponent>\n);\n\nexport const query = graphql`\n  query MarkdownPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      ...Article\n    }\n  }\n`;\n"],"names":["_ref","data","markdownRemark","location","pathname","TypeError","fields","frontmatter","html","Error","category","prop","slug","articleMF2Class","articleType","date","bodyItemProp","React","Layout","Article","title","bannerImageData","image","_markdownRemark$front","childImageSharp","_markdownRemark$front2","bannerImgData","imageAlt","undefined","imageCaption","machineReadableDate","Head","_ref2","description","excerpt","HeadComponent","imageUrl","getSrc","pageTitle","property","content","id"],"sourceRoot":""}