{"version":3,"sources":["webpack://tetov-xyz/./node_modules/classnames/index.js","webpack://tetov-xyz/./src/components/content/body.tsx","webpack://tetov-xyz/./src/markdown-styles.module.css","webpack://tetov-xyz/./src/components/content/head.tsx","webpack://tetov-xyz/./src/components/content/header.tsx","webpack://tetov-xyz/./src/components/content/preview.tsx","webpack://tetov-xyz/./src/templates/notes.tsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","content","itemProp","className","classnames","dangerouslySetInnerHTML","__html","title","excerpt","type","imgSrc","imgAlt","lang","dateCreated","Helmet","property","name","url","children","Link","to","fields","slug","previewImg","heroImg","frontmatter","description","G","alt","image","loading","location","data","markdownRemark","html","heroImgData","date","machineReadableDate","pathName","pathname","subHeading","getSrc","itemScope","itemType","imgClassName","dateTime"],"mappings":"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","file":"component---src-templates-notes-tsx-8a81c7c55dadf22477b7.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import classnames from \"classnames\";\nimport React from \"react\";\nimport * as markdownStyles from \"../../markdown-styles.module.css\";\n\ntype Props = {\n  content: string;\n  itemProp: string;\n  className?: string;\n};\n\nconst ContentBody = ({ content, itemProp, className }: Props) => (\n  <section\n    className={classnames(\n      \"e-content max-w-2xl mx-auto\",\n      className,\n      markdownStyles[\"markdown\"]\n    )}\n    dangerouslySetInnerHTML={{ __html: content }}\n    itemProp={itemProp}\n  />\n);\n\nexport default ContentBody;\n","// extracted by mini-css-extract-plugin\nexport var markdown = \"markdown-styles-module--markdown--4A2lD\";","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ntype ContentLayoutProp = {\n  title: string;\n  excerpt?: string;\n  imgSrc?: string;\n  lang?: string;\n  type?: string;\n  imgAlt?: string;\n  dateCreated?: string;\n};\n\nconst ContentHead: React.FC<ContentLayoutProp> = ({\n  title,\n  excerpt,\n  type,\n  imgSrc,\n  imgAlt,\n  lang,\n  dateCreated,\n}) => (\n  <Helmet>\n    {lang && <html lang={lang} />}\n\n    <title>{title}</title>\n    <meta property=\"og:title\" content={title} />\n\n    {excerpt && <meta name=\"description\" content={excerpt} />}\n    {excerpt && <meta property=\"og:description\" content={excerpt} />}\n\n    {type && <meta property=\"og:type\" content={type} />}\n\n    {imgSrc && <meta property=\"og:image:url\" content={imgSrc} />}\n    {imgSrc && imgAlt && <meta property=\"og:image:alt\" content={imgAlt} />}\n\n    {dateCreated && type === \"article\" && (\n      <meta property=\"article:published_time\" content={dateCreated} />\n    )}\n  </Helmet>\n);\n\nexport default ContentHead;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\ntype PageHeaderProps = {\n  url: string;\n  itemProp?: string;\n  children: React.ReactNode;\n};\n\nconst ContentHeader: React.FC<PageHeaderProps> = ({\n  url,\n  itemProp = \"headline\",\n  children,\n}) => (\n  <header className=\"text-center md:justify-between mb-16 md:mb-12\">\n    <h2 className=\"mt-4 w-2/3 text-2xl md:text-4xl font-light inline-block leading-relaxed\">\n      <Link to={url} className=\"p-name link-style-alt\" itemProp={itemProp}>\n        {children}\n      </Link>\n    </h2>\n  </header>\n);\n\nexport default ContentHeader;\n","import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nconst ContentPreview = ({\n  excerpt,\n  fields: {\n    slug,\n    heroImg: { previewImg },\n  },\n  frontmatter: { title, description },\n}: GatsbyTypes.ContentPreviewFragment) => (\n  <div>\n    <Link to={`/${slug}`} className=\"link-style-alt\">\n      <GatsbyImage\n        alt={`Cover image for ${title}`}\n        image={previewImg}\n        loading=\"lazy\"\n        className=\"mb-5\"\n      />\n      <h3 className=\"text-3xl mb-3 leading-snug\">{title}</h3>\n    </Link>\n    <div className=\"mb-4\">\n      <p className=\"text-lg leading-relaxed mb-4\">{description || excerpt}</p>\n    </div>\n  </div>\n);\n\nexport default ContentPreview;\n\nexport const fragmen = graphql`\n  fragment ContentPreview on MarkdownRemark {\n    ...ProjMetaData\n    fields {\n      heroImg {\n        previewImg: gatsbyImageData(\n          width: 684\n          aspectRatio: 1.33\n          placeholder: BLURRED\n          transformOptions: { cropFocus: CENTER }\n        )\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage, getSrc } from \"gatsby-plugin-image\";\nimport React from \"react\";\nimport { ContentBody, ContentHead } from \"../components/content\";\nimport Layout from \"../components/layout\";\n\nconst TemplateNote: GatsbyPage<GatsbyTypes.NotePropQuery> = ({\n  location,\n  data: {\n    markdownRemark: {\n      html,\n      excerpt,\n      fields: {\n        slug,\n        heroImg: { heroImgData },\n      },\n      frontmatter: { lang, date, machineReadableDate },\n    },\n  },\n}) => (\n  <Layout pathName={location.pathname} subHeading=\"a note\">\n    <ContentHead\n      title={`A note posted ${date}`}\n      excerpt={excerpt}\n      imgSrc={getSrc(heroImgData)}\n      lang={lang}\n    />\n    <article\n      className=\"h-entry\"\n      itemScope\n      itemType=\"http://schema.org/SocialMediaPosting\"\n    >\n      <ContentBody content={html} itemProp=\"articleBody\" className=\"p-name\" />\n      <GatsbyImage\n        alt={excerpt}\n        image={heroImgData}\n        loading=\"eager\"\n        className=\"mb-8 md:mb-16\"\n        imgClassName=\"shadow-sm hover:shadow-md transition-shadow duration-200 u-photo\"\n        itemProp=\"sharedContent\"\n      />\n      <Link to={`./notes/${slug}`} className=\"alt-link-style\">\n        <time itemProp=\"dateCreated\" dateTime={machineReadableDate}>\n          {date}\n        </time>\n      </Link>\n    </article>\n  </Layout>\n);\n\nexport default TemplateNote;\n\nexport const pageQuery = graphql`\n  query NoteProp($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt\n      html\n      fields {\n        slug\n        heroImg {\n          ...HeroImg\n        }\n      }\n      frontmatter {\n        lang\n        date(formatString: \"HH:mm D [of] MMM, YYYY\")\n        machineReadableDate: date\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}