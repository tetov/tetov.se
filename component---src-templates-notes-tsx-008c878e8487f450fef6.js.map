{"version":3,"file":"component---src-templates-notes-tsx-008c878e8487f450fef6.js","mappings":";2FAAA,OAOA,WACE,aAEA,IAAIA,EAAS,GAAGC,eAEhB,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,EAAQM,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IACvB,GAAIA,EAAID,OAAQ,CACd,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAE/BK,GACFT,EAAQM,KAAKG,SAGZ,GAAgB,WAAZJ,EACT,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,SACpC,IAAK,IAAIG,KAAOV,EACVP,EAAOkB,KAAKX,EAAKU,IAAQV,EAAIU,IAC/Bd,EAAQM,KAAKQ,QAIjBd,EAAQM,KAAKF,EAAIO,aAKvB,OAAOX,EAAQgB,KAAK,KAGeC,EAAOC,SAC1CnB,EAAWoB,QAAUpB,EACrBkB,EAAOC,QAAUnB,QAKhB,KAFwB,EAAF,WACrB,OAAOA,GACR,QAFoB,OAEpB,aA9CL,wJCeA,EAZoB,SAAC,GAAD,IAAGqB,EAAH,UAAYC,EAAZ,WAAsBC,EAAtB,mBAClB,2BACEA,UAAWC,GAAAA,CAAW,8BAAD,ECXH,2CDgBlBC,wBAAyB,CAAEC,OAAQL,GACnCC,SAAUA,eESd,EAlBsC,SAAC,GAAD,IACpCK,EADoC,mBAEpCL,OAFoC,mBAGpCM,EAHoC,kBAKpC,0BAAQL,UAAU,iDAChB,sBAAIA,UAAU,2EACZ,wBACEM,GADF,EAEEN,UAFF,8BAGED,SAAUA,GAVoB,eCmBtC,EAxBuB,SAAC,GAAD,IACrBQ,EADqB,qBAGnBC,EAHmB,OAIRC,EAJQ,qCAMNC,EANM,QAMCC,EAND,qBAQrB,2BACE,wBAAML,GAAE,IAAR,EAAsBN,UAAU,kBAC9B,qBACEY,IAAG,mBADL,EAEEC,MAFF,EAGEC,QAHF,OAIEd,UAAU,SAEZ,sBAAIA,UAAU,8BARlB,IAUE,uBAAKA,UAAU,QACb,qBAAGA,UAAU,gCAAgCW,GAnB5B,+GCkDvB,UA/C4D,SAAC,GAAD,IAC9CI,EAD8C,4CAItDC,EAJsD,OAKtDT,EALsD,qBAOpDC,EAPoD,OAQzCS,EARyC,sCAUvCC,EAVuC,OAUjCC,EAViC,OAU3BC,EAV2B,6BAc1D,qBAAQC,SAAR,EAA4BC,WAAW,UACrC,sBACEZ,MAAK,iBADP,EAEEH,QAFF,EAGEW,KAAMA,IAER,2BACElB,UADF,UAEEuB,WAFF,EAGEC,SAAS,wCAET,sBAAa1B,QAAb,EAA4BC,SAA5B,cAAmDC,UAAU,WAC7D,qBACEY,IADF,EAEEC,MAFF,EAGEC,QAHF,QAIEd,UAJF,gBAKEyB,aALF,mEAME1B,SAAS,kBAEX,wBAAMO,GAAE,WAAR,EAA6BN,UAAU,wBACrC,wBACEA,UADF,eAEED,SAFF,cAGE2B,SAAUN,GAtCwC","sources":["webpack://tetov-xyz/./node_modules/classnames/index.js","webpack://tetov-xyz/./src/components/content/body.tsx","webpack://tetov-xyz/./src/markdown-styles.module.css","webpack://tetov-xyz/./src/components/content/header.tsx","webpack://tetov-xyz/./src/components/content/preview.tsx","webpack://tetov-xyz/./src/templates/notes.tsx"],"sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString === Object.prototype.toString) {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        } else {\n          classes.push(arg.toString());\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import classnames from \"classnames\";\nimport React from \"react\";\nimport * as markdownStyles from \"../../markdown-styles.module.css\";\n\ntype Props = {\n  content: string;\n  itemProp: string;\n  className?: string;\n};\n\nconst ContentBody = ({ content, itemProp, className }: Props) => (\n  <section\n    className={classnames(\n      \"e-content max-w-2xl mx-auto\",\n      className,\n      markdownStyles[\"markdown\"]\n    )}\n    dangerouslySetInnerHTML={{ __html: content }}\n    itemProp={itemProp}\n  />\n);\n\nexport default ContentBody;\n","// extracted by mini-css-extract-plugin\nexport var markdown = \"markdown-styles-module--markdown--4A2lD\";","import { Link } from \"gatsby\";\nimport React from \"react\";\n\ntype Prop = {\n  url: string;\n  itemProp?: string;\n  children: React.ReactNode;\n};\n\nconst ContentHeader: React.FC<Prop> = ({\n  url,\n  itemProp = \"headline\",\n  children,\n}) => (\n  <header className=\"text-center md:justify-between mb-16 md:mb-12\">\n    <h2 className=\"mt-4 w-2/3 text-2xl md:text-4xl font-light inline-block leading-relaxed\">\n      <Link\n        to={url}\n        className=\"p-name link-style-alt u-url\"\n        itemProp={itemProp}\n      >\n        {children}\n      </Link>\n    </h2>\n  </header>\n);\n\nexport default ContentHeader;\n","import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\n\nconst ContentPreview = ({\n  excerpt,\n  fields: {\n    slug,\n    heroImg: { previewImg },\n  },\n  frontmatter: { title, description },\n}: GatsbyTypes.ContentPreviewFragment) => (\n  <div>\n    <Link to={`/${slug}`} className=\"link-style-alt\">\n      <GatsbyImage\n        alt={`Cover image for ${title}`}\n        image={previewImg}\n        loading=\"lazy\"\n        className=\"mb-5\"\n      />\n      <h3 className=\"text-3xl mb-3 leading-snug\">{title}</h3>\n    </Link>\n    <div className=\"mb-4\">\n      <p className=\"text-lg leading-relaxed mb-4\">{description || excerpt}</p>\n    </div>\n  </div>\n);\n\nexport default ContentPreview;\n\nexport const fragment = graphql`\n  fragment ContentPreview on MarkdownRemark {\n    ...ProjMetaData\n    fields {\n      heroImg {\n        previewImg: gatsbyImageData(\n          width: 684\n          aspectRatio: 1.33\n          placeholder: BLURRED\n          transformOptions: { cropFocus: CENTER }\n        )\n      }\n    }\n  }\n`;\n","import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\nimport { ContentBody } from \"src/components/content\";\nimport Layout from \"src/components/layout\";\nimport { MetaContent } from \"src/components/meta\";\n\nconst TemplateNote: GatsbyPage<GatsbyTypes.NotePropQuery> = ({\n  location: { pathname },\n  data: {\n    markdownRemark: {\n      html,\n      excerpt,\n      fields: {\n        slug,\n        heroImg: { heroImgData },\n      },\n      frontmatter: { lang, date, machineReadableDate },\n    },\n  },\n}) => (\n  <Layout pathName={pathname} subHeading=\"a note\">\n    <MetaContent\n      title={`A note posted ${date}`}\n      excerpt={excerpt}\n      lang={lang}\n    />\n    <article\n      className=\"h-entry\"\n      itemScope\n      itemType=\"http://schema.org/SocialMediaPosting\"\n    >\n      <ContentBody content={html} itemProp=\"articleBody\" className=\"p-name\" />\n      <GatsbyImage\n        alt={excerpt}\n        image={heroImgData}\n        loading=\"eager\"\n        className=\"mb-8 md:mb-16\"\n        imgClassName=\"shadow-sm hover:shadow-md transition-shadow duration-200 u-photo\"\n        itemProp=\"sharedContent\"\n      />\n      <Link to={`./notes/${slug}`} className=\"alt-link-style u-url\">\n        <time\n          className=\"dt-published\"\n          itemProp=\"dateCreated\"\n          dateTime={machineReadableDate}\n        >\n          {date}\n        </time>\n      </Link>\n    </article>\n  </Layout>\n);\n\nexport default TemplateNote;\n\nexport const pageQuery = graphql`\n  query NoteProp($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt\n      html\n      fields {\n        slug\n        heroImg {\n          ...HeroImg\n        }\n      }\n      frontmatter {\n        lang\n        date(formatString: \"HH:mm D [of] MMM, YYYY\")\n        machineReadableDate: date\n      }\n    }\n  }\n`;\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","content","itemProp","className","classnames","dangerouslySetInnerHTML","__html","url","children","to","excerpt","slug","previewImg","title","description","alt","image","loading","pathname","html","heroImgData","lang","date","machineReadableDate","pathName","subHeading","itemScope","itemType","imgClassName","dateTime"],"sourceRoot":""}