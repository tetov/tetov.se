{"version":3,"file":"f8742f24121da61ad6659b0bd05f87f33b67ca2c-3a792898b110a2227969.js","mappings":"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","sources":["webpack://tetov-xyz/./node_modules/classnames/index.js","webpack://tetov-xyz/../src/image-utils.ts","webpack://tetov-xyz/../src/components/hooks.ts","webpack://tetov-xyz/../src/components/picture.tsx","webpack://tetov-xyz/../src/components/layout-wrapper.tsx","webpack://tetov-xyz/../src/components/placeholder.tsx","webpack://tetov-xyz/../src/components/main-image.tsx","webpack://tetov-xyz/../src/components/gatsby-image.browser.tsx","webpack://tetov-xyz/../src/components/gatsby-image.server.tsx","webpack://tetov-xyz/../src/components/static-image.server.tsx","webpack://tetov-xyz/../src/components/static-image.tsx","webpack://tetov-xyz/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://tetov-xyz/./src/components/article/body.tsx","webpack://tetov-xyz/./src/markdown-styles.module.css","webpack://tetov-xyz/./src/components/article/header.tsx","webpack://tetov-xyz/./src/components/article/time.tsx","webpack://tetov-xyz/./src/components/article/preview.tsx","webpack://tetov-xyz/./src/components/article/index.tsx","webpack://tetov-xyz/./src/hooks/query-twitter-uname.tsx","webpack://tetov-xyz/./src/components/head.tsx","webpack://tetov-xyz/./src/components/footer.tsx","webpack://tetov-xyz/./src/components/header.tsx","webpack://tetov-xyz/./src/components/layout.tsx","webpack://tetov-xyz/./src/hooks/query-site-metadata.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import classnames from \"classnames\";\nimport * as React from \"react\";\nimport * as markdownStyles from \"../../markdown-styles.module.css\";\n\ntype Props = {\n  content: string;\n  itemProp: string;\n  className?: string;\n};\n\nconst ArticleBody: React.FC<Props> = ({ content, itemProp, className }) => (\n  <section\n    className={classnames(\n      \"e-content max-w-2xl mx-auto\",\n      className,\n      markdownStyles[\"markdown\"]\n    )}\n    dangerouslySetInnerHTML={{ __html: content }}\n    itemProp={itemProp}\n  />\n);\n\nexport default ArticleBody;\n","// extracted by mini-css-extract-plugin\nexport var markdown = \"markdown-styles-module--markdown--66c1a\";","import { Link } from \"gatsby\";\nimport * as React from \"react\";\n\ntype Prop = {\n  url: string;\n  itemProp?: string;\n  children: React.ReactNode;\n};\n\nconst ArticleHeader: React.FC<Prop> = ({\n  url,\n  itemProp = \"headline\",\n  children,\n}) => (\n  <header className=\"text-center md:justify-between mb-16 md:mb-12\">\n    <h2 className=\"mt-4 w-2/3 text-2xl md:text-4xl font-light inline-block leading-relaxed\">\n      <Link\n        to={url}\n        className=\"p-name link-style-alt u-url\"\n        itemProp={itemProp}\n      >\n        {children}\n      </Link>\n    </h2>\n  </header>\n);\n\nexport default ArticleHeader;\n","import * as React from \"react\";\n\ntype TimeProp = {\n  className?: string;\n  itemProp?: string;\n  machineReadableDate: string;\n};\n\nconst Time: React.FC<React.PropsWithChildren<TimeProp>> = ({\n  children,\n  machineReadableDate,\n  className,\n  itemProp,\n}) => (\n  <time\n    className={className || \"dt-published\"}\n    itemProp={itemProp || \"dateCreated\"}\n    dateTime={machineReadableDate}\n  >\n    {children}\n  </time>\n);\n\nexport default Time;\n","import { graphql, Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport * as React from \"react\";\n\nconst ArticlePreview: React.FC<Queries.ArticlePreviewFragment> = ({\n  excerpt,\n  fields: { slug, category },\n  frontmatter: { title, description, image, imageAlt },\n}) => {\n  const previewImg = image?.childImageSharp?.previewImg;\n\n  if (category === \"projs\" && !previewImg) {\n    throw new Error(\"Missing preview image.\");\n  }\n\n  const blurb = description || excerpt;\n\n  if (!blurb) {\n    throw new Error(\"Missing blurb (neither description nor excerpt present).\");\n  }\n\n  return (\n    <div>\n      <Link to={`/${slug}/`} className=\"link-style-alt\">\n        {/* Add fallback image for future */}\n        {previewImg && (\n          <GatsbyImage\n            alt={imageAlt || `Cover image for ${title}`}\n            image={previewImg}\n            loading=\"lazy\"\n            className=\"mb-5\"\n          />\n        )}\n        <h3 className=\"text-3xl mb-3 leading-snug\">{title}</h3>\n      </Link>\n      <div className=\"mb-4\">\n        <p\n          className=\"text-lg leading-relaxed mb-4\"\n          dangerouslySetInnerHTML={{ __html: description || excerpt || \"\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ArticlePreview;\n\nexport const fragment = graphql`\n  fragment ArticlePreview on MarkdownRemark {\n    excerpt(pruneLength: 160, format: HTML)\n    fields {\n      slug\n      category\n    }\n    frontmatter {\n      title\n      description\n      imageAlt\n      image {\n        childImageSharp {\n          previewImg: gatsbyImageData(\n            width: 684\n            aspectRatio: 1.33\n            placeholder: BLURRED\n            transformOptions: { cropFocus: CENTER }\n          )\n        }\n      }\n    }\n  }\n`;\n","import ArticleBody from \"./body\";\nimport ArticleHeader from \"./header\";\nimport Time from \"./time\";\n\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport * as React from \"react\";\n\ntype ArticleMarkup = {\n  articleClass: string;\n  articleType: string;\n  bodyItemProp: string;\n};\n\nexport type ArticleProp = ArticleMarkup & {\n  pathname: string;\n  html: string;\n  title: string;\n  machineReadableDate: string;\n  date?: string;\n  bannerImageData?: IGatsbyImageData;\n  imageAlt?: string;\n};\n\nconst Article: React.FC<ArticleProp> = ({\n  pathname,\n  articleClass,\n  articleType,\n  bodyItemProp,\n  html,\n  title,\n  date,\n  machineReadableDate,\n  bannerImageData,\n  imageAlt,\n}) => {\n  return (\n    <article\n      className={articleClass}\n      itemScope\n      itemType={`http://schema.org/${articleType}`}\n    >\n      <ArticleHeader itemProp=\"headline\" url={`/${pathname}`}>\n        {title}\n      </ArticleHeader>\n      <Time machineReadableDate={machineReadableDate}>\n        {date && (\n          <p className=\"mb-4 text-4xl lg:text-6xl leading-tight\">{date}</p>\n        )}\n      </Time>\n      {bannerImageData && (\n        <GatsbyImage\n          alt={imageAlt || `Cover image for ${title}`}\n          image={bannerImageData}\n          loading=\"eager\"\n          className=\"mb-8 md:mb-16\"\n          imgClassName=\"shadow-sm hover:shadow-md transition-shadow duration-200\"\n        />\n      )}\n      <ArticleBody content={html} itemProp={bodyItemProp} />\n    </article>\n  );\n};\n\nexport { default as ArticlePreview } from \"./preview\";\nexport default Article;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nconst queryTwitterUname = () => {\n  const { allContactData } =\n    useStaticQuery<Queries.TwitterUsernameQuery>(graphql`\n      query TwitterUsername {\n        allContactData(filter: { label: { eq: \"twitter\" } }, limit: 1) {\n          nodes {\n            username\n          }\n        }\n      }\n    `);\n  return allContactData.nodes.length !== 1\n    ? \"\"\n    : `@${allContactData.nodes[0].username}`;\n};\n\nexport default queryTwitterUname;\n","import * as React from \"react\";\nimport querySiteMetadata from \"src/hooks/query-site-metadata\";\nimport queryTwitterUname from \"src/hooks/query-twitter-uname\";\n\nexport const Head: React.FC<\n  React.PropsWithChildren<{\n    pathname?: string;\n    pageTitle?: string;\n    description?: string;\n    imageUrl?: string;\n    pageDate?: string;\n    pageType?: string;\n  }>\n> = ({ pageTitle, description, imageUrl: image, pathname, children }) => {\n  const {\n    title: siteTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteURL,\n  } = querySiteMetadata();\n  const twitterUsername = queryTwitterUname();\n\n  const metaDescription = description || defaultDescription;\n  const metaImage = `${siteURL}${image || defaultImage}`;\n\n  return (\n    <>\n      <title>{pageTitle ? `${pageTitle} - ${siteTitle}` : siteTitle}</title>\n      <meta property=\"og:title\" content={pageTitle || siteTitle} />\n\n      <meta property=\"og:site_name\" content={siteTitle} />\n\n      <meta\n        name=\"description\"\n        content={metaDescription.trim()}\n        id=\"description\"\n      />\n\n      <meta\n        property=\"og:description\"\n        content={metaDescription}\n        id=\"description\"\n      />\n\n      <meta property=\"og:image\" content={metaImage} />\n\n      <meta property=\"og:url\" content={`${siteURL}${pathname || ``}`} />\n\n      <meta property=\"og:type\" content=\"website\" id=\"og:type\" />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:site\" content={twitterUsername} />\n      <meta name=\"twitter:creator\" content={twitterUsername} />\n      {children}\n    </>\n  );\n};\n","import * as React from \"react\";\n\nconst Footer: React.FC<React.PropsWithChildren> = ({ children }) => (\n  <footer className=\"pt-8 pb-16 items-center\">\n    {/* <hr className=\"m-8 text-light-alt dark:text-dark-alt\" /> */}\n    {children}\n  </footer>\n);\n\nexport default Footer;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport querySiteMetadata from \"src/hooks/query-site-metadata\";\n\nexport type HeaderProp = {\n  subHeading?: JSX.Element | string;\n};\n\nconst Header: React.FC<HeaderProp> = ({ subHeading }) => (\n  <header className=\"text-center md:justify-between pt-12 mb-16 md:mb-12\">\n    <Link to=\"/\">\n      <h1 className=\"text-7xl md:text-8xl font-bold tracking-tighter leading-tight\">\n        {querySiteMetadata().title}\n      </h1>\n    </Link>{\" \"}\n    {subHeading && (\n      <h2 className=\"mt-4 w-2/3 text-2xl md:text-4xl font-light inline-block leading-relaxed\">\n        {subHeading}\n      </h2>\n    )}\n  </header>\n);\n\nexport default Header;\n","import * as React from \"react\";\nimport Footer from \"src/components/footer\";\nimport type { HeaderProp } from \"src/components/header\";\nimport Header from \"src/components/header\";\n\ntype LayoutProps = React.PropsWithChildren<HeaderProp>;\n\nconst Layout: React.FC<LayoutProps> = ({ children, subHeading }) => (\n  <div className=\"global-wrapper min-h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text\">\n    <div className=\"w-full md:w-3/4 lg:w-1/2 mx-auto px-5 space-y-6\">\n      <Header subHeading={subHeading} />\n      <main>{children}</main>\n      <Footer />\n    </div>\n  </div>\n);\n\nexport default Layout;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nconst querySiteMetadata = () => {\n  const { site } = useStaticQuery<Queries.SiteMetaDataQuery>(\n    graphql`\n      query SiteMetaData {\n        site {\n          siteMetadata {\n            title\n            siteURL\n            lang\n            description\n            image\n          }\n        }\n      }\n    `\n  );\n  return site.siteMetadata;\n};\n\nexport default querySiteMetadata;\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","height","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","q","P","H","srcSet","decoding","undefined","fallback","t","sizes","Image","map","media","type","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","camelCase","input","options","TypeError","assign","pascalCase","x","trim","filter","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","content","itemProp","classnames","url","Link","to","machineReadableDate","dateTime","excerpt","fields","slug","category","frontmatter","title","description","imageAlt","previewImg","childImageSharp","_image$childImageShar","pathname","articleClass","articleType","bodyItemProp","html","date","bannerImageData","itemScope","itemType","ArticleHeader","Time","imgClassName","ArticleBody","allContactData","useStaticQuery","nodes","username","Head","pageTitle","imageUrl","querySiteMetadata","siteTitle","defaultDescription","defaultImage","siteURL","twitterUsername","queryTwitterUname","metaDescription","metaImage","property","name","id","subHeading","Header","Footer","site","siteMetadata"],"sourceRoot":""}