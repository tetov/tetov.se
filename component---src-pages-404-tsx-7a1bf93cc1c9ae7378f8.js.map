{"version":3,"file":"component---src-pages-404-tsx-7a1bf93cc1c9ae7378f8.js","mappings":"6KAkBA,EAhB0B,WACxB,IAAQA,GACNC,EAAAA,EAAAA,gBAAc,cADRD,eAUR,OAAuC,IAAhCA,EAAeE,MAAMC,OACxB,GADGH,IAECA,EAAeE,MAAM,GAAGE,QAblC,ECsDA,EA7CI,SAAH,GAAiE,IAA3DC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SACjD,GAKIC,EAAAA,EAAAA,KAJKC,EAAS,EAAhBC,MACaC,EAAkB,EAA/BP,YACOQ,EAAY,EAAnBC,MACAC,EAAO,EAAPA,QAEIC,EAAkBC,IAElBC,EAAkBb,GAAeO,EACjCO,EAAY,GAAGJ,GAAUT,GAAYO,GAE3C,OACEO,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQhB,EAAeA,EAAS,MAAMM,EAAcA,GACpDU,EAAAA,cAAAA,OAAAA,CAAMC,SAAS,WAAWC,QAASlB,GAAaM,IAEhDU,EAAAA,cAAAA,OAAAA,CAAMC,SAAS,eAAeC,QAASZ,IAEvCU,EAAAA,cAAAA,OAAAA,CACEG,KAAK,cACLD,QAASJ,EAAgBM,OACzBC,GAAG,gBAGLL,EAAAA,cAAAA,OAAAA,CACEC,SAAS,iBACTC,QAASJ,EACTO,GAAG,gBAGLL,EAAAA,cAAAA,OAAAA,CAAMC,SAAS,WAAWC,QAASH,IAEnCC,EAAAA,cAAAA,OAAAA,CAAMC,SAAS,SAASC,QAAO,GAAKP,GAAUR,GAAY,MAE1Da,EAAAA,cAAAA,OAAAA,CAAMC,SAAS,UAAUC,QAAQ,UAAUG,GAAG,YAE9CL,EAAAA,cAAAA,OAAAA,CAAMG,KAAK,eAAeD,QAAQ,YAClCF,EAAAA,cAAAA,OAAAA,CAAMG,KAAK,eAAeD,QAASN,IACnCI,EAAAA,cAAAA,OAAAA,CAAMG,KAAK,kBAAkBD,QAASN,IACrCR,EAGP,C,qEC7CA,EAPkD,SAAC,GAAD,IAAGA,EAAH,EAAGA,SAAH,OAChDY,EAAAA,cAAAA,SAAAA,CAAQM,UAAU,2BAEflB,EAHL,E,oBCqBA,EAfqC,SAAC,GAAD,IAAGmB,EAAH,EAAGA,WAAH,OACnCP,EAAAA,cAAAA,SAAAA,CAAQM,UAAU,uDAChBN,EAAAA,cAACQ,EAAAA,KAAD,CAAMC,GAAG,KACPT,EAAAA,cAAAA,KAAAA,CAAIM,UAAU,kEACXjB,EAAAA,EAAAA,KAAoBE,QAEjB,IACPgB,GACCP,EAAAA,cAAAA,KAAAA,CAAIM,UAAU,2EACXC,GATT,ECSA,EAVsC,SAAC,GAAD,IAAGnB,EAAH,EAAGA,SAAUmB,EAAb,EAAaA,WAAb,OACpCP,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,+FACbN,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,mDACbN,EAAAA,cAACU,EAAD,CAAQH,WAAYA,IACpBP,EAAAA,cAAAA,OAAAA,KAAOZ,GACPY,EAAAA,cAACW,EAAD,OALN,C,qCCcA,IAnB0B,WAgBxB,OAfiB/B,EAAAA,EAAAA,gBAAc,cAAvBgC,KAeIC,YAhBd,C,mGCWA,UAR+B,WAAH,OAC1Bb,EAAAA,cAACc,EAAAA,EAAM,CAACP,WAAW,kBACjBP,EAAAA,cAAAA,IAAAA,CAAGM,UAAU,eAAa,8CAGnB,EAKJ,IAAMS,EAAe,SAAH,OAAkB5B,EAAQ,EAApB6B,SAAY7B,SAAQ,OACjDa,EAAAA,cAACiB,EAAAA,EAAa,CAACjC,UAAU,iBAAiBG,SAAUA,GAAY,C","sources":["webpack://tetov-xyz/./src/hooks/query-twitter-uname.tsx","webpack://tetov-xyz/./src/components/head.tsx","webpack://tetov-xyz/./src/components/footer.tsx","webpack://tetov-xyz/./src/components/header.tsx","webpack://tetov-xyz/./src/components/layout.tsx","webpack://tetov-xyz/./src/hooks/query-site-metadata.tsx","webpack://tetov-xyz/./src/pages/404.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\";\n\nconst queryTwitterUname = () => {\n  const { allContactData } =\n    useStaticQuery<Queries.TwitterUsernameQuery>(graphql`\n      query TwitterUsername {\n        allContactData(filter: { label: { eq: \"twitter\" } }, limit: 1) {\n          nodes {\n            username\n          }\n        }\n      }\n    `);\n  return allContactData.nodes.length !== 1\n    ? \"\"\n    : `@${allContactData.nodes[0].username}`;\n};\n\nexport default queryTwitterUname;\n","import * as React from \"react\";\nimport querySiteMetadata from \"src/hooks/query-site-metadata\";\nimport queryTwitterUname from \"src/hooks/query-twitter-uname\";\n\nconst HeadComponent: React.FC<\n  React.PropsWithChildren<{\n    pathname: string;\n    pageTitle?: string;\n    description?: string;\n    imageUrl?: string;\n  }>\n> = ({ pageTitle, description, imageUrl, pathname, children }) => {\n  const {\n    title: siteTitle,\n    description: defaultDescription,\n    image: defaultImage,\n    siteURL,\n  } = querySiteMetadata();\n  const twitterUsername = queryTwitterUname();\n\n  const metaDescription = description || defaultDescription;\n  const metaImage = `${siteURL}${imageUrl || defaultImage}`;\n\n  return (\n    <>\n      <title>{pageTitle ? `${pageTitle} - ${siteTitle}` : siteTitle}</title>\n      <meta property=\"og:title\" content={pageTitle || siteTitle} />\n\n      <meta property=\"og:site_name\" content={siteTitle} />\n\n      <meta\n        name=\"description\"\n        content={metaDescription.trim()}\n        id=\"description\"\n      />\n\n      <meta\n        property=\"og:description\"\n        content={metaDescription}\n        id=\"description\"\n      />\n\n      <meta property=\"og:image\" content={metaImage} />\n\n      <meta property=\"og:url\" content={`${siteURL}${pathname || ``}`} />\n\n      <meta property=\"og:type\" content=\"website\" id=\"og:type\" />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:site\" content={twitterUsername} />\n      <meta name=\"twitter:creator\" content={twitterUsername} />\n      {children}\n    </>\n  );\n};\n\nexport default HeadComponent;\n","import * as React from \"react\";\n\nconst Footer: React.FC<React.PropsWithChildren> = ({ children }) => (\n  <footer className=\"pt-8 pb-16 items-center\">\n    {/* <hr className=\"m-8 text-light-alt dark:text-dark-alt\" /> */}\n    {children}\n  </footer>\n);\n\nexport default Footer;\n","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport querySiteMetadata from \"src/hooks/query-site-metadata\";\n\nexport type HeaderProp = {\n  subHeading?: JSX.Element | string;\n};\n\nconst Header: React.FC<HeaderProp> = ({ subHeading }) => (\n  <header className=\"text-center md:justify-between pt-12 mb-16 md:mb-12\">\n    <Link to=\"/\">\n      <h1 className=\"text-7xl md:text-8xl font-bold tracking-tighter leading-tight\">\n        {querySiteMetadata().title}\n      </h1>\n    </Link>{\" \"}\n    {subHeading && (\n      <h2 className=\"mt-4 w-2/3 text-2xl md:text-4xl font-light inline-block leading-relaxed\">\n        {subHeading}\n      </h2>\n    )}\n  </header>\n);\n\nexport default Header;\n","import * as React from \"react\";\nimport Footer from \"src/components/footer\";\nimport type { HeaderProp } from \"src/components/header\";\nimport Header from \"src/components/header\";\n\ntype LayoutProps = React.PropsWithChildren<HeaderProp>;\n\nconst Layout: React.FC<LayoutProps> = ({ children, subHeading }) => (\n  <div className=\"global-wrapper min-h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text\">\n    <div className=\"w-full md:w-3/4 lg:w-1/2 mx-auto px-5 space-y-6\">\n      <Header subHeading={subHeading} />\n      <main>{children}</main>\n      <Footer />\n    </div>\n  </div>\n);\n\nexport default Layout;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nconst querySiteMetadata = () => {\n  const { site } = useStaticQuery<Queries.SiteMetaDataQuery>(\n    graphql`\n      query SiteMetaData {\n        site {\n          siteMetadata {\n            title\n            siteURL\n            lang\n            description\n            image\n          }\n        }\n      }\n    `\n  );\n  return site.siteMetadata;\n};\n\nexport default querySiteMetadata;\n","import { HeadFC } from \"gatsby\";\nimport * as React from \"react\";\nimport HeadComponent from \"src/components/head\";\nimport Layout from \"src/components/layout\";\n\nconst NotFoundPage: React.FC = () => (\n  <Layout subHeading=\"404: Not found\">\n    <p className=\"text-center\">\n      You just hit a route that doesn&#39;t exist...\n    </p>\n  </Layout>\n);\n\nexport default NotFoundPage;\n\nexport const Head: HeadFC = ({ location: { pathname } }) => (\n  <HeadComponent pageTitle=\"404: Not found\" pathname={pathname} />\n);\n"],"names":["allContactData","useStaticQuery","nodes","length","username","pageTitle","description","imageUrl","pathname","children","querySiteMetadata","siteTitle","title","defaultDescription","defaultImage","image","siteURL","twitterUsername","queryTwitterUname","metaDescription","metaImage","React","property","content","name","trim","id","className","subHeading","Link","to","Header","Footer","site","siteMetadata","Layout","Head","location","HeadComponent"],"sourceRoot":""}